<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Setting player related statistics on create

teleportAble = 1; //1 = TP is ready, 0 = not ready

xx = x;  //these coordinates are used for calculating the laser line
yy = y;

depth = 1;
invulnerable = 1;
//During the invulnerability phase an animation of the player blinking will need happen
alarm[9] = 180; //This alarm is equal to the number of steps the player is invulnerable for after dying


//Shot affecting variables
waveShotAngle1 = 110;
waveShotAngle2 = 70;
wave1Rev = 0;
wave2Rev = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>invulnerable = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This alarm handles the teleporter upgrade

teleportAble = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This alarm handles the wave shot pattern once the player purchases the upgrade

if(HASWAVESHOT == 1)
{
    leftShotWave = instance_create(x-20, y-10, obj_PlayerBullet2);
    rightShotWave = instance_create(x+20, y-10, obj_PlayerBullet2);
    
    leftShotWave.direction = waveShotAngle1;
    rightShotWave.direction = waveShotAngle2;
    
    if(HASWAVEENHANCEMENT == 1)
    {
        leftShotWave2 = instance_create(x-30, y-10, obj_PlayerBullet2);
        rightShotWave2 = instance_create(x+30, y-10, obj_PlayerBullet2);
            
        leftShotWave2.direction = waveShotAngle1;
        rightShotWave2.direction = waveShotAngle2;
        
    } //end wave enhancement block
    
    if(wave1Rev == 0)
    {
        if(waveShotAngle1 &lt; 110) waveShotAngle1 +=4;
        else wave1Rev = 1;
    }
    if(wave1Rev == 1)
    {
        if(waveShotAngle1 &gt; 70) waveShotAngle1 -=4;
        else wave1Rev = 0;
    }
    
    if(wave2Rev == 0)
    {
        if(waveShotAngle2 &lt; 110) waveShotAngle2 +=4;
        else wave2Rev = 1;
    }
    if(wave2Rev == 1)
    {
        if(waveShotAngle2 &gt; 70) waveShotAngle2 -=4;
        else wave2Rev = 0;
    }

} //end outer if
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Alarm 0 of the player object handles the players basic shot pattern

//centered bullets (base shot pattern)
leftStream = instance_create(x+7, y-16, obj_PlayerBullet1);
rightStream = instance_create(x-7, y-16, obj_PlayerBullet1);

//Triple shot updrage
if(HASTRIPLESHOT == 1)
{
    middleStream = instance_create(x, y-26, obj_PlayerBullet1);
    middleStream.direction = 90;
}

//Spread shot upgrade
if(HASSPREADSHOT == 1)
{
    angleRight1 = instance_create(x+7, y-16, obj_PlayerBullet1);
    angleLeft1 = instance_create(x-7, y-16, obj_PlayerBullet1);
    angleRight1.direction = 85;
    angleLeft1.direction = 95;
}

//Spread shot enhancement
if(HASSPREADENHANCEMENT == 1)
{
    angleRight2 = instance_create(x+17, y-16, obj_PlayerBullet1);
    angleLeft2 = instance_create(x-17, y-16, obj_PlayerBullet1);
    angleRight2.direction = 85;
    angleLeft2.direction = 95;
}

//Direct shot upgrade
if(HASDIRECTSHOT == 1)
{
    directRight1 = instance_create(x+12, y-16, obj_PlayerBullet1);
    directLeft1  = instance_create(x-12, y-16, obj_PlayerBullet1);
    directRight1.direction = 90;
    directLeft1.direction  = 90;
}

//Direct shot enhancement
if(HASDIRECTENHANCEMENT == 1)
{
    directRight2 = instance_create(x+25, y-6, obj_PlayerBullet1);
    directLeft2  = instance_create(x-25, y-6, obj_PlayerBullet1);
    directRight2.direction = 90;
    directLeft2.direction  = 90;
}

//centered bullets
leftStream.direction = 90;
rightStream.direction = 90;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

//-------------------------------------------------------------------
// Code handling standardized diagonal movement
//-------------------------------------------------------------------

LR = 0;
UD = 0;

if (keyboard_check(vk_left)) LR = "L";
else if (keyboard_check(vk_right)) LR = "R";

if (keyboard_check(vk_up)) UD = "U";
else if (keyboard_check(vk_down)) UD = "D";    

switch (string(LR)+string(UD))
    {
    case "00": break;
    
    case "L0": x -= PLAYER_SPEED; break;
    case "R0": x += PLAYER_SPEED; break;
    case "0U": y -= PLAYER_SPEED; break;
    case "0D": y += PLAYER_SPEED; break;
    
    case "LU": x -= DIAGONAL_SPEED; y -= DIAGONAL_SPEED; break;
    case "RU": x += DIAGONAL_SPEED; y -= DIAGONAL_SPEED; break;
    case "LD": x -= DIAGONAL_SPEED; y += DIAGONAL_SPEED; break;
    case "RD": x += DIAGONAL_SPEED; y += DIAGONAL_SPEED; break;
    }
    
//-------------------------------------------------------------------
//Code handling boundary detection
//-------------------------------------------------------------------
    
  x = min(x, room_width - 406);
  x = max(x, 406);
  y = min(y, room_height - 16);
  y = max(y, 16);
  
//-------------------------------------------------------------------
//Code handling hit detection with damaging objects
//-------------------------------------------------------------------

if (invulnerable == 0) 
{

    hitObj = instance_place(x, y, obj_EnemyBulletParent);
    
    if(hitObj != noone) 
    {
        PLAYER_LIVES -= 1;
        //Code (probably script call) to be put here handling death animation etc.. before respawning
        script_execute(scr_PlayerDeath);
        with (hitObj) instance_destroy();
        instance_destroy();
    }
    
/*    hitObj = instance_place(x, y, obj_EnemyBullet2);
    
    if(hitObj != noone) 
    {
        PLAYER_LIVES -= 1;
        //Code (probably script call) to be put here handling death animation etc.. before respawning
        script_execute(scr_PlayerDeath);
         with (hitObj) instance_destroy();
        instance_destroy();
    }
    
    hitObj = instance_place(x, y, obj_EnemyBullet3);
    
    if(hitObj != noone) 
    {
        PLAYER_LIVES -= 1;
        //Code (probably script call) to be put here handling death animation etc.. before respawning
        script_execute(scr_PlayerDeath);
         with (hitObj) instance_destroy();
        instance_destroy();
    }
*/

} //End of invulnerability if statement
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(alarm[0] = -1) alarm[0] = PLAYER_SHOTSPEED;   //Basic shot alarm
if(alarm[1] = -1) alarm[1] = PLAYER_SHOTSPEED - PLAYER_WAVESHOTSPEED; //Wave Shot Alarm
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check(vk_space))   //handles player lasers
{
    if(HASDIRECTLASER = 1)
    {
        if(HASLASERENHANCEMENT = 1)
        {
            scr_DrawLaser(x, y, 90, 1000, obj_EnemyParent, 1, c_red, 21, DIRECT_LASER_DAMAGE + .1)
        }
        else
        {
            scr_DrawLaser(x, y, 90, 1000, obj_EnemyParent, 1, c_red, 14, DIRECT_LASER_DAMAGE)
        }
    }//end has direct laser

  if(HASHOMINGLASER = 1)
  {
        if instance_exists(obj_EnemyParent)
        {
            clst=instance_nearest(x,y,obj_EnemyParent) 
            scr_DrawLaser(x-38, y+10, point_direction(x-38, y+10, clst.x, clst.y), 1000, obj_EnemyParent, 1, c_blue, 4, HOMING_LASER_DAMAGE)
            scr_DrawLaser(x+38, y+10, point_direction(x+38, y+10, clst.x, clst.y), 1000, obj_EnemyParent, 1, c_blue, 4, HOMING_LASER_DAMAGE)
        }
    }//end wave final if
}

//draw ship sprite
draw_sprite_ext(spr_Player, 0, x, y, 1, 1, image_angle, c_white, 1)

//Code handling the draw for the teleporter
if (keyboard_check(vk_shift) and teleportAble = 1 and HASTELEPORTER = 1)
{
    LR = 0;
    UD = 0;
    d = .707  //diagonal normalization constant
    r = 200;  //Distance of teleport

    draw_set_alpha(.5);
    draw_set_color(c_black);
    draw_circle(x, y, r, true);
    
    if (keyboard_check(vk_left)) LR = "L";
    else if (keyboard_check(vk_right)) LR = "R";
    
    if (keyboard_check(vk_up)) UD = "U";
    else if (keyboard_check(vk_down)) UD = "D";    
    
    switch (string(LR)+string(UD))
        {
        case "00": break;
        
        case "L0": draw_arrow(x, y, x-r, y, 10); break;
        case "R0": draw_arrow(x, y, x+r, y, 10); break;
        case "0U": draw_arrow(x, y, x, y-r, 10); break;
        case "0D": draw_arrow(x, y, x, y+r, 10); break;
        
        case "LU": draw_arrow(x, y, x-(r*d), y-(r*d), 10); break;
        case "RU": draw_arrow(x, y, x+(r*d), y-(r*d), 10); break;
        case "LD": draw_arrow(x, y, x-(r*d), y+(r*d), 10); break;
        case "RD": draw_arrow(x, y, x+(r*d), y+(r*d), 10); break;
        }
        
        draw_set_alpha(1);
}


    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Play Animation of some type
if (teleportAble = 1 and HASTELEPORTER = 1)
{
    LR = 0;
    UD = 0;
    d = .707  //diagonal normalization constant
    r = 200;  //Distance of teleport
    
    if (keyboard_check(vk_left)) LR = "L";
    else if (keyboard_check(vk_right)) LR = "R";
    
    if (keyboard_check(vk_up)) UD = "U";
    else if (keyboard_check(vk_down)) UD = "D";    
    
    switch (string(LR)+string(UD))
        {
        case "00": break;
        
        case "L0": x = x - r; teleportAble = 0; alarm[8] = TELEPORTER_CD; break;
        case "R0": x = x + r; teleportAble = 0; alarm[8] = TELEPORTER_CD; break;
        case "0U": y = y - r; teleportAble = 0; alarm[8] = TELEPORTER_CD; break;
        case "0D": y = y + r; teleportAble = 0; alarm[8] = TELEPORTER_CD; break;
        
        case "LU": x = x - r; y = y - r; teleportAble = 0; alarm[8] = TELEPORTER_CD; break;
        case "RU": x = x + r; y = y - r; teleportAble = 0; alarm[8] = TELEPORTER_CD; break;
        case "LD": x = x - r; y = y + r; teleportAble = 0; alarm[8] = TELEPORTER_CD; break;
        case "RD": x = x + r; y = y + r; teleportAble = 0; alarm[8] = TELEPORTER_CD; break;
        }
        
    instance_create(x,y,obj_BulletDestroyer); //Destroys all bullets within short range
} // end of outer if
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
