<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>305</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_timeline_set</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>14</kind>
            <timeline>tl_Versus1</timeline>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*******************************************************
Kill counters are kept as a secondary method of spawning
attacks to the enemy side of the screen. This is handled
in the step event.
*********************************************************/
player1KillCount = 0;
player2KillCount = 0;

player1BulletSpawn = 0;
player2BulletSpawn = 0;

player1WinCount = 0;
player2WinCount = 0;

room_fade = 0;
fading = 0;

depth = -1000;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*******************************************************
Check and manipulate the player kill counts to handle
secondary attack methods.
*********************************************************/
if(player1KillCount &gt;= 20)
{
    obj_Player1.alarm[1] = 10;
    player1KillCount = 0;
}

if(player2KillCount &gt;= 20)
{
    obj_Player2.alarm[1] = 10;
    player2KillCount = 0;
}

/*******************************************************
Check and manipulate the player kill counts to handle
player bullet spawning
*********************************************************/
if(player1BulletSpawn &gt;= 1)
{
    bullet = instance_create(685+irandom(490), (10+irandom(350)), obj_smallBullet1);
    bullet.speed = .5 + random(1);
    bullet.direction = 250 + irandom(40);
    bullet.right = 1;
    
    player1BulletSpawn = 0;
}

if(player2BulletSpawn &gt;= 1)
{
    bullet = instance_create(105+irandom(490), (10+irandom(350)), obj_smallBullet1);
    bullet.speed = .5 + random(1);
    bullet.direction = 250 + irandom(40);

    player2BulletSpawn = 0;
}


/*******************************************************
Check and manipulate the player win counts to handle
game state.
*********************************************************/
if(PLAYER1_HP &lt;= 0)
{
    //PLAY ANIMATION FOR PLAYER 1 DYING RIGHT HERE
    fading = 1;
    room_fade+=0.02;
    
    if(room_fade &gt;= 1)
    {
        PLAYER1_HP = 10;
        PLAYER2_HP = 10;
        room_goto(rm_Level1);
        timeline_position = 0;
        player2WinCount = player2WinCount + 1;
        fading = 2;
    }
}

if(PLAYER2_HP &lt;= 0)
{
    //PLAY ANIMATION FOR PLAYER 2 DYING RIGHT HERE

    fading = 1;
    room_fade+=0.02;
    
    if(room_fade &gt;= 1)
    {
        PLAYER1_HP = 10;
        PLAYER2_HP = 10;
        room_goto(rm_Level1);
        timeline_position = 0;
        player1WinCount = player1WinCount + 1;
        fading = 2;
    }
}

/*******************************************************
In the if block handling fading == 2 any code dealing with 
a player winning the entire round needs to be called. Such
as increasing win counts, or showing a victory screen etc..
*********************************************************/
if(fading == 2)
{

    if(player1WinCount == 2)
    {
        player1WinCount = 0;
        player2WinCount = 0;
        timeline_running = false;
        room_goto(rm_Menu);
    }
    else if(player2WinCount == 2)
    {
        player1WinCount = 0;
        player2WinCount = 0;
        timeline_running = false;
        room_goto(rm_Menu);
    }

    room_fade = room_fade-.05;
    
    if(room_fade &lt;= 0)
    {
        fading = 0;
        room_fade = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*******************************************************
The following code handles drawing the health bar at the
top of the screen for both players. 
*********************************************************/
if(room == rm_Level1)
{
    var i, xx, yy, xSpace;
    xx = 270;      //x position of the leftmost heart
    yy = 30;      //y position of the hearts
    xSpace = 40;  //spacing between hearts
    
    for(i=0; i &lt; (PLAYER1_HP/2); i+=1)
    {
        if((PLAYER1_HP mod 2 == 1) and (i == (floor(PLAYER1_HP/2) )))
        {draw_sprite(spr_Health, 1, xx + xSpace * i, yy);}
        else
        {draw_sprite(spr_Health, 0, xx + xSpace * i, yy);}
        
    }
    
    for(i=0; i &lt; (PLAYER2_HP/2); i+=1)
    {
        if((PLAYER2_HP mod 2 == 1) and (i == (floor(PLAYER2_HP/2) )))
        {draw_sprite(spr_Health, 1, xx + 580 + xSpace * i, yy);}
        else
        {draw_sprite(spr_Health, 0, xx + 580 + xSpace * i, yy);}
        
    }
    
    for(i=0; i &lt; (player1WinCount); i+=1)
    {draw_sprite(spr_Health, 0, 580 - (xSpace) * i, yy);}
    
    for(i=0; i &lt; (player2WinCount); i+=1)
    {draw_sprite(spr_Health, 0, 700 + (xSpace) * i, yy);}
}

/*******************************************************
The square drawn below is used for fade effects, and any
transparency effects during gameplay.
*********************************************************/

draw_set_alpha(room_fade);
draw_rectangle(0,0,room_width,room_height,0);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
