<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Player1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>moveLock1 = 0;
invulnerable1 = 0;
powerLevel = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw ship sprite based on ship type
if(SHIP_TYPE = 1)
{
    
}
else if(SHIP_TYPE == 2)
{
    
}
else if(SHIP_TYPE = 3)
{
    
}
else if(SHIP_TYPE = 4)
{
    
}
else if(SHIP_TYPE = 5)
{
    
}
else if(SHIP_TYPE = 6)
{
    
}
else if(SHIP_TYPE = 7)
{
    
}
else if(SHIP_TYPE = 8)
{
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(WEAPON_TYPE = "direct")
{
    if (powerLevel = 1)
    {
        leftStream = instance_create(x+7, y-16, obj_P1Bullet1);
        rightStream = instance_create(x-7, y-16, obj_P1Bullet1);
        leftStream.direction = 90;
        rightStream.direction = 90;
    }
    else if(powerLevel = 2)
    {
    
    }
    else if(powerLevel = 3)
    {
    
    }
    else if(powerLevel = 4)
    {
    
    }
    else if(powerLevel = 5)
    {
    
    }
    
    }
else if(WEAPON_TYPE = "spread")
{
    if (powerLevel = 1)
    {
    
    }
    else if(powerLevel = 2)
    {
    
    }
    else if(powerLevel = 3)
    {
    
    }
    else if(powerLevel = 4)
    {
    
    }
    else if(powerLevel = 5)
    {
    
    }
}
else if(WEAPON_TYPE = "homing")
{
    if (powerLevel = 1)
    {
    
    }
    else if(powerLevel = 2)
    {
    
    }
    else if(powerLevel = 3)
    {
    
    }
    else if(powerLevel = 4)
    {
    
    }
    else if(powerLevel = 5)
    {
    
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//-------------------------------------------------------------------
// Code handling standardized diagonal movement
//-------------------------------------------------------------------
if(moveLock1 == 0)
{
    LR = 0;
    UD = 0;
    
    if (keyboard_check(vk_left)) LR = "L";
    else if (keyboard_check(vk_right)) LR = "R";
    
    if (keyboard_check(vk_up)) UD = "U";
    else if (keyboard_check(vk_down)) UD = "D";    
    
    switch (string(LR)+string(UD))
        {
        case "00": break;
        
        case "L0": x -= PLAYER1_SPEED; break;
        case "R0": x += PLAYER1_SPEED; break;
        case "0U": y -= PLAYER1_SPEED; break;
        case "0D": y += PLAYER1_SPEED; break;
        
        case "LU": x -= DIAGONAL_SPEED; y -= DIAGONAL_SPEED; break;
        case "RU": x += DIAGONAL_SPEED; y -= DIAGONAL_SPEED; break;
        case "LD": x -= DIAGONAL_SPEED; y += DIAGONAL_SPEED; break;
        case "RD": x += DIAGONAL_SPEED; y += DIAGONAL_SPEED; break;
        }
        
       /*switch (joystick_direction(1))
       {
           case vk_numpad1: x -= DIAGONAL_SPEED; y += DIAGONAL_SPEED; break;
           case vk_numpad2: y += PLAYER1_SPEED; break;
           case vk_numpad3: x += DIAGONAL_SPEED; y += DIAGONAL_SPEED; break;
           case vk_numpad4: x -= PLAYER1_SPEED; break;
           case vk_numpad6: x += PLAYER1_SPEED; break;
           case vk_numpad7: x -= DIAGONAL_SPEED; y -= DIAGONAL_SPEED; break;
           case vk_numpad8: y -= PLAYER1_SPEED; break;
           case vk_numpad9: x += DIAGONAL_SPEED; y -= DIAGONAL_SPEED; break;
       } */
}
//-------------------------------------------------------------------
//Code handling boundary detection
//-------------------------------------------------------------------
    
  x = min(x, room_width - 696);
  x = max(x, 116);
  y = min(y, room_height - 16);
  y = max(y, 16);
  
//-------------------------------------------------------------------
//Code handling hit detection with damaging objects
//-------------------------------------------------------------------

if (invulnerable1 == 0) 
{

    hitObj = instance_place(x, y, obj_EnemyBulletParent);
    
    if(hitObj != noone) 
    {
        PLAYER1_HP -= 1;
        with (hitObj) instance_destroy();
        instance_destroy();
    }
    

} //End of invulnerability if statement

if(PLAYER1_HP &lt;= 0)
{
    //CALL SCRIPT FOR DEATH
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(moveLock1 == 0)
{
   if(alarm[0] = -1) alarm[0] = PLAYER1_SHOTSPEED;   //Basic shot alarm
   // if(alarm[1] = -1) alarm[1] = PLAYER1_SHOTSPEED - PLAYER1_WAVESHOTSPEED; //Wave Shot Alarm
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw ship sprite based on ship type
if(SHIP_TYPE = 1)
{draw_sprite_ext(spr_Player1, 0, x, y, 1, 1, image_angle, c_white, 1)}
else if(SHIP_TYPE == 2)
{

}
else if(SHIP_TYPE = 3)
{

}
else if(SHIP_TYPE = 4)
{

}
else if(SHIP_TYPE = 5)
{

}
else if(SHIP_TYPE = 6)
{

}
else if(SHIP_TYPE = 7)
{

}
else if(SHIP_TYPE = 8)
{

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
